#title Flaarc - (F)untional (La)tex-like M(ar)kdown Clone, With Some (C)-like Syntax. Also Lisp, Too.

#section What is it; Why should I use it?
I made this project because I was unhappy with Latex, as it's tough to write short documents in it, but I also didn't
want to use Markdown, becuase it'd lack many features present in Latex. Flaarc is supposed to have a syntax that
resembles normal text as little as possible, that way when you don't need the features, you don't have them, but when
you do, they're fairly easy to use. Does this mean you should use it? Probably not, at least not yet. As it is
//very// much __alpha quality__, I wouldn't recommend it for anything remotely serious. As a fun thing to try? Sure.


#section Using It From The CLI
The basic syntax is as follows:
(path to flaarc bin) -i (input file) -f (format) -o (output file)

Please note that while the format and output files aren't required, as they default to "markdown" and "out.md" respectively, the input file __is__ required.

Some other options include:
{list:
	--help / -h:	print help info
	frog:		Don't worry about it.
}



#section Italics & Bold.
Italics can be defined with the text intended to be itallicized surounded by "\/\/".
For example, "\//italic text\//" makes "//italic text//"

Bold is almost identical, but instead of surrounding the text with "\//" you surround it with "\__"
For example, "\__bold text\__" becomes "__bold text__"

If you want to type \__ or \// __without__ bolding or italicizing the text, precede the chars with a backslash.
For example, to type \__, you would type \\\__ instead.


#section Hashes
Hashes are lines that begin with the '\#' symbol. There are a few types of hashes:


\#\#: this is a note, a line that starts with two hashes __and a space__ will be discarded by the Flaarc parser.
\#section \{name\}: make a section, this means make a <h2> tag in the emmitted HTML.
\#title \{title\}: set the title, this will be the title of the webpage, and will be printed at the top, defaults to: "title". Creative, I know.
\#setfont \{font\} set the font.

to type a \# on it's own, ensure it's preceded by a backslash, like this: \\\#.


#section Functions
Functions in Flaarc are just programs. You can make your own functions by copying the executable file into "/lib/flaarc".
The syntax of a function is as follows:
\{ FUNCTION_NAME_HERE : FUNCTION ARG HERE \}
Upon seeing this, the parser will try to run a program in the directory /lib/flaarc and will pass the "FUNCTION ARG HERE" section as __one__ CLI argument to the program. Anything the program writes to the standard output will be parsed and then put in the document. Because it's parsed, it's syntactically legal to declare variables and even call other function within the output of the program. 
Note: if the funtion is called without a ':', and therefore no argument to pass to the progam, it will run the program without passing anything to it.

One way this could be used, is if you want to be able to import your name, make a title, etc. __without__ having to retype it every time you make a new document, you could make a function that you could call at the beginning of the document that retuns the needed text.

There are reserved functions:
{list:
	The list function makes lists.
	The link function makes links.
}


#section Thank you.
I want to say, thank you for showing interest in this hobby project, it's been fun for me, and I hope you'll have fun too.


#section Features I want to add:
{list:
	image support.
	standard library of functions.
	an optional GUI.
	better error messages.
}
